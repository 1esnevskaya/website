---
import FormattedDate from "../../../components/FormattedDate.astro";
import PageHeader from "../../../components/PageHeader.astro";
import Layout from "../../../layouts/Layout.astro";
import { listReleaseNotes, url, processor } from "../../../utils";

const description = "NocoBase リリースタイムライン";
const basepath = "/ja/blog";
// Add this function to process markdown content
async function renderMarkdown(content: string) {
  const { code } = await processor.render(content || '');
  return code;
}

const releaseNotes = await listReleaseNotes();

const allItems = await Promise.all(releaseNotes.map(async (article) => ({
  ...article,
  renderedContent: await renderMarkdown(article.content_ja)
})));

const filterTypes = [
  { id: 'all', label: 'すべて', value: 'all', className: '' },
  { id: 'main', label: 'main', value: 'main', className: 'text-info' },
  { id: 'beta', label: 'beta', value: 'beta', className: 'text-warning' },
  { id: 'alpha', label: 'alpha', value: 'alpha', className: 'text-danger' }
];

const tabs = [
  { title: "ホーム", link: "/ja/" },
  { title: "ブログ", link: "/ja/blog" },
  { title: "リリースタイムライン", active: true }
];
---

<Layout title="リリースタイムライン" description={description}>
  <PageHeader
    title="リリースタイムライン"
    description={description}
    breadcrumb={tabs}
  />

  <section class="section">
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-lg-12">
          <div class="filter-buttons text-center mb-4">
            {filterTypes.map(filter => (
              <div class="form-check form-check-inline">
                <input 
                  class="form-check-input" 
                  type="checkbox" 
                  id={`filter-${filter.id}`}
                  value={filter.value}
                  checked={filter.value === 'all'}
                />
                <label class={`form-check-label ${filter.className}`} for={`filter-${filter.id}`}>
                  {filter.label}
                </label>
              </div>
            ))}
          </div>
          <div class="timeline-page position-relative">
            {allItems.map(article => (
              <div class="timeline-item mt-4" data-tags={article.tags.join(',')}>
                <div class="row">
                  <div class="col-lg-3 col-md-3">
                    <div class="duration date-label-left border rounded p-2 px-4 position-relative shadow">
                      <FormattedDate date={article.publishedAt} />
                    </div>
                  </div>

                  <div class="col-lg-9 col-md-9">
                    {article.isMilestone ? (
                      <div class="card event rounded shadow border-0 overflow-hidden float-start milestone">
                        {article.cover && (
                          <img src={url(article.cover.url)} class="img-fluid" alt={article.title_ja || article.title} />
                        )}
                        <div class="card-body">
                          <h4>
                            <a href={`${basepath}/${article.slug}`}>
                              {article.title_ja || article.title}
                            </a>
                          </h4>
                          <p class="mt-3 mb-0 text-muted">{article.description_ja || article.description}</p>
                        </div>
                      </div>
                    ) : (
                      <div class="card event rounded shadow border-0 overflow-hidden float-start">
                        <div class="card-body">
                          <h3 class="h4">
                            <a href={`${basepath}/${article.slug}`}>
                              {article.title_ja || article.title}
                            </a>
                          </h3>
                          <div class="text-muted mt-2" set:html={article.renderedContent} />
                          {article.tags.length > 0 && (
                            <div class="mt-2">
                              {article.tags.map(tag => (
                                <span class="badge bg-secondary me-1">{tag}</span>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
.timeline-page:after {
  right: auto;
  left: 24%;
}

.card.event img {
  max-width: 100%;
  max-height: 300px;
  object-fit: cover;
}

.card.event {
  max-width: 100%;
}

@media (max-width: 767px) {
  .timeline-page:after {
    left: 0;
  }
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filters = new Set();
    const allCheckbox = document.getElementById('filter-all');

    document.querySelectorAll('.form-check-input').forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        const value = e.target.value.toLowerCase();

        if (value === 'all') {
          document.querySelectorAll('.form-check-input').forEach(cb => {
            cb.checked = e.target.checked;
          });
          filters.clear();
          if (e.target.checked) filters.add('all');
        } else {
          e.target.checked ? filters.add(value) : filters.delete(value);
          allCheckbox.checked = false;
          filters.delete('all');
        }

        document.querySelectorAll('.timeline-item').forEach(item => {
          const tags = Array.from(item.dataset.tags.split(','))
            .map(t => t.toLowerCase());
          
          if (filters.size === 0) {
            item.style.display = 'block';
            return;
          }

          const shouldShow = filters.has('all') || 
            Array.from(filters).some(f => tags.includes(f));

          item.style.display = shouldShow ? 'block' : 'none';
        });
      });
    });
  });
</script>
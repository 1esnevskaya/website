---
import FormattedDate from "../../../components/FormattedDate.astro";
import PageHeader from "../../../components/PageHeader.astro";
import Layout from "../../../layouts/Layout.astro";
import { listReleaseNotes, url, processor } from "../../../utils";

const description = "最新の機能、改善点、およびバグ修正について学びましょう。";
const basepath = "/ja/blog";
// Add this function to process markdown content
async function renderMarkdown(content: string) {
  // First process with existing processor
  const { code } = await processor.render(content || '');
  
  // Then adjust heading levels by replacing h1-h6 tags
  const adjustedCode = code
    .replace(/<h1/g, '<h3')
    .replace(/<\/h1>/g, '</h3>')
    .replace(/<h2/g, '<h4')
    .replace(/<\/h2>/g, '</h4>')
    .replace(/<h3/g, '<h5')
    .replace(/<\/h3>/g, '</h5>')
    .replace(/<h4/g, '<h6')
    .replace(/<\/h4>/g, '</h6>')
    .replace(/<h5/g, '<h6')
    .replace(/<\/h5>/g, '</h6>')
    .replace(/<h6/g, '<h6')
    .replace(/<\/h6>/g, '</h6>');
    
  return adjustedCode;
}

// 最初のページデータを取得
const { data: releaseNotes, meta: initialMeta } = await listReleaseNotes({ page: 1, pageSize: 30 });

const allItems = await Promise.all(releaseNotes.map(async (article: any) => ({
  ...article,
  renderedContent: await renderMarkdown(article.content_ja || '')
})));

const filterTypes = [
  { id: 'all', label: 'すべて', value: 'all', className: '' },
  { id: 'milestone', label: 'Milestone', value: 'milestone', className: 'text-primary' },
  { id: 'latest', label: 'latest', value: 'latest', className: 'text-info' },
  { id: 'beta', label: 'beta', value: 'beta', className: 'text-warning' },
  { id: 'alpha', label: 'alpha', value: 'alpha', className: 'text-danger' }
];

// タグのスタイルクラスを取得するヘルパー関数を追加
function getTagClassName(tag: string) {
  const filterType = filterTypes.find(f => f.value === tag.toLowerCase());
  return filterType ? `bg-${filterType.className.replace('text-', '')}` : 'bg-secondary';
}

const tabs = [
  { title: "ホーム", link: "/ja/" },
  { title: "ブログ", link: "/ja/blog" },
  { title: "リリースノート ", active: true }
];
---

<Layout title="リリースノート " description={description}>
  <PageHeader
    title="リリースノート "
    description={description}
    breadcrumb={tabs}
  />

  <section class="section">
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-lg-12">
          <div class="filter-buttons text-center mb-4">
            {filterTypes.map(filter => (
              <div class="form-check form-check-inline">
                <input 
                  class="form-check-input" 
                  type="radio" 
                  name="filter-type"
                  id={`filter-${filter.id}`}
                  value={filter.value}
                  checked={filter.value === 'all'}
                />
                <label class={`form-check-label ${filter.className}`} for={`filter-${filter.id}`}>
                  {filter.label}
                </label>
              </div>
            ))}
          </div>
          <div class="timeline-page position-relative" id="timeline-container">
            {allItems.map(article => (
              <div class="timeline-item mt-4" data-tags={article.tags.join(',')}>
                <div class="row">
                  <div class="col-lg-3 col-md-3">
                    <div class="duration date-label-left border rounded p-2 px-4 position-relative shadow">
                      <FormattedDate date={article.publishedAt} />
                    </div>
                  </div>

                  <div class="col-lg-9 col-md-9">
                    {article.isMilestone ? (
                      <div class="card event rounded shadow border-0 overflow-hidden float-start milestone">
                        {article.cover && (
                          <img src={url(article.cover.url)} class="img-fluid" alt={article.title_ja || article.title} />
                        )}
                        <div class="card-body">
                          <h5>
                            <a href={`${basepath}/${article.slug}`}>
                              {article.title_ja || article.title}
                            </a>
                          </h5>
                          <p class="mt-3 mb-0 text-muted">{article.description_ja || article.description}</p>
                        </div>
                      </div>
                    ) : (
                      <div class="card event rounded shadow border-0 overflow-hidden float-start">
                        <div class="card-body">
                          <h3 class="h4">
                            <a href={`${basepath}/${article.slug}`}>
                              {article.title_ja || article.title}
                            </a>
                          </h3>
                          <div class="text-muted mt-2" set:html={article.renderedContent} />
                          {article.tags.length > 0 && (
                            <div class="mt-2">
                              {article.tags.map(tag => (
                                <span class={`badge me-1 ${getTagClassName(tag)}`}>{tag}</span>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <!-- ローディングインジケーター -->
          <div id="loading-indicator" class="text-center mt-4 d-none">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">読み込み中...</span>
            </div>
            <p class="mt-2">コンテンツを読み込んでいます...</p>
          </div>
          
          <!-- 続きを読み込むボタン -->
          <div id="load-more-button" class="text-center mt-4">
            <button class="btn btn-primary">続きを読み込む</button>
          </div>
          
          <!-- コンテンツがこれ以上ないメッセージ -->
          <div id="no-more-content" class="text-center mt-4 d-none">
            <p class="text-muted">これ以上コンテンツはありません</p>
          </div>
          
          <!-- 初期メタデータ -->
          <div id="initial-meta" class="d-none" data-meta={JSON.stringify(initialMeta)}></div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
.timeline-page:after {
  right: auto;
  left: 24%;
}

.card.event img {
  max-width: 100%;
  max-height: 300px;
  object-fit: cover;
}

.card.event {
  width: 100%;
}

@media (max-width: 767px) {
  .timeline-page:after {
    left: 0;
  }
}
</style>

<script is:inline>
  // ページ読み込み後に実行
  document.addEventListener('DOMContentLoaded', () => {
    // 初期メタデータを取得
    const initialMeta = JSON.parse(document.getElementById('initial-meta')?.dataset.meta || '{}');
    let currentPage = 1;
    let isLoading = false;
    let hasMoreContent = true; // 常にtrueをデフォルトとし、APIレスポンスでさらにコンテンツがあるかどうかを決定
    let currentFilter = 'all';
    let allLoadedItems = []; // 読み込まれた全てのアイテムを保存
    
    // 異なるフィルターごとのページサイズ設定
    const pageSizeConfig = {
      all: 30,        // 「すべて」オプションは1リクエストあたり30項目を読み込む
      milestone: 150, // 「マイルストーン」オプションは1リクエストあたり150項目を読み込む
      latest: 30,     // その他のオプションはデフォルト値を使用
      beta: 30,
      alpha: 30
    };
    
    // アクティブなフィルターに基づいて現在のページサイズを取得
    function getPageSize() {
      return pageSizeConfig[currentFilter] || 30;
    }
    
    console.log('ページ初期化', { 
      initialMeta, 
      hasMoreContent,
      currentPage,
      currentFilter,
      pageSize: getPageSize()
    });

    // 新しい記事をページにレンダリング
    function renderNewItems(items, append = true) {
      const container = document.getElementById('timeline-container');
      if (!container) {
        console.error('コンテナ要素が見つかりません');
        return;
      }
      
      // 追加モードでない場合、コンテナをクリア
      if (!append) {
        container.innerHTML = '';
      }
      
      console.log(`${items.length}個の新アイテムをレンダリング`);
      
      items.forEach(item => {
        const articleDiv = document.createElement('div');
        articleDiv.className = 'timeline-item mt-4';
        articleDiv.dataset.tags = item.tags.join(',');
        
        const articleHtml = `
          <div class="row">
            <div class="col-lg-3 col-md-3">
              <div class="duration date-label-left border rounded p-2 px-4 position-relative shadow">
                ${formatDate(new Date(item.publishedAt))}
              </div>
            </div>

            <div class="col-lg-9 col-md-9">
              ${item.isMilestone ? `
                <div class="card event rounded shadow border-0 overflow-hidden float-start milestone">
                  ${item.cover ? `<img src="${item.cover.url}" class="img-fluid" alt="${item.title}" />` : ''}
                  <div class="card-body">
                    <h5>
                      <a href="/ja/blog/${item.slug}">
                        ${item.title}
                      </a>
                    </h5>
                    <p class="mt-3 mb-0 text-muted">${item.description}</p>
                  </div>
                </div>
              ` : `
                <div class="card event rounded shadow border-0 overflow-hidden float-start">
                  <div class="card-body">
                    <h5>
                      <a href="/ja/blog/${item.slug}">
                        ${item.title}
                      </a>
                    </h5>
                    <div class="text-muted mt-2">${item.renderedContent}</div>
                    ${item.tags.length > 0 ? `
                      <div class="mt-2">
                        ${item.tags.map(tag => `
                          <span class="badge me-1 ${getTagClassName(tag)}">${tag}</span>
                        `).join('')}
                      </div>
                    ` : ''}
                  </div>
                </div>
              `}
            </div>
          </div>
        `;
        
        articleDiv.innerHTML = articleHtml;
        
        // 現在のフィルターに基づいて表示または非表示
        if (currentFilter !== 'all') {
          const tags = item.tags.map(t => t.toLowerCase());
          if (currentFilter === 'milestone') {
            articleDiv.style.display = item.isMilestone ? 'block' : 'none';
          } else {
            articleDiv.style.display = tags.includes(currentFilter) ? 'block' : 'none';
          }
        }
        
        container.appendChild(articleDiv);
      });
      
      // 現在のフィルターを適用
      applyCurrentFilter();
    }
    
    // 初期化：初期アイテムを収集
    const initialItems = [];
    document.querySelectorAll('.timeline-item').forEach(item => {
      const dataItem = extractDataFromElement(item);
      if (dataItem) {
        initialItems.push(dataItem);
      }
    });
    allLoadedItems = [...initialItems];
    console.log('初期アイテム収集完了:', initialItems.length);
    
    // DOM要素からデータを抽出
    function extractDataFromElement(element) {
      try {
        const tagsAttr = element.dataset.tags || '';
        const tags = tagsAttr.split(',');
        
        const titleElement = element.querySelector('h5 a');
        const contentElement = element.querySelector('.text-muted.mt-2');
        const descriptionElement = element.querySelector('.mt-3.mb-0.text-muted');
        const dateElement = element.querySelector('.duration.date-label-left');
        
        return {
          title: titleElement ? titleElement.innerText : '',
          content: contentElement ? contentElement.innerHTML : '',
          description: descriptionElement ? descriptionElement.innerText : '',
          publishedAt: dateElement ? dateElement.innerText : '',
          tags: tags,
          slug: titleElement ? titleElement.getAttribute('href').split('/').pop() : '',
          isMilestone: element.querySelector('.milestone') !== null
        };
      } catch (error) {
        console.error('データ抽出エラー:', error);
        return null;
      }
    }
    
    // 日付のフォーマット
    function formatDate(date) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return date.toLocaleDateString('ja-JP', options);
    }
    
    // タグのクラス名を取得
    function getTagClassName(tag) {
      const filterTypes = [
        { value: 'milestone', className: 'bg-primary' },
        { value: 'latest', className: 'bg-info' },
        { value: 'beta', className: 'bg-warning' },
        { value: 'alpha', className: 'bg-danger' }
      ];
      
      const filterType = filterTypes.find(f => f.value === tag.toLowerCase());
      return filterType ? filterType.className : 'bg-secondary';
    }
    
    // 現在のフィルターを適用
    function applyCurrentFilter() {
      console.log('現在のフィルターを適用:', currentFilter);
      
      // DOM内の要素を非表示/表示
        document.querySelectorAll('.timeline-item').forEach(item => {
        if (!(item instanceof HTMLElement)) return;
        
        const tagsAttr = item.dataset.tags || '';
        const tags = tagsAttr.split(',').map(t => t.toLowerCase());
        
        // 「全て」を選択した場合、すべてのコンテンツを表示
        if (currentFilter === 'all') {
            item.style.display = 'block';
            return;
          }

        // マイルストーンフィルターの場合、マイルストーンクラスがあるかどうかを確認
        if (currentFilter === 'milestone') {
            const hasMilestone = item.querySelector('.milestone') !== null;
            item.style.display = hasMilestone ? 'block' : 'none';
            return;
          }

        // 選択されたフィルターに一致するコンテンツを表示
        item.style.display = tags.includes(currentFilter) ? 'block' : 'none';
      });
      
      // 読み込みボタンとメッセージの表示を更新
      updateLoadMoreVisibility();
    }
    
    // 読み込みボタンとメッセージの表示を更新
    function updateLoadMoreVisibility() {
      const loadMoreButton = document.getElementById('load-more-button');
      const noMoreContent = document.getElementById('no-more-content');
      
      if (loadMoreButton) {
        loadMoreButton.style.display = hasMoreContent ? 'block' : 'none';
      }
      
      if (noMoreContent) {
        noMoreContent.style.display = !hasMoreContent ? 'block' : 'none';
      }
    }
    
    // コンテンツをもっと読み込む
    async function loadMoreContent() {
      if (isLoading) {
        console.log('読み込み中です、お待ちください');
        return;
      }
      
      isLoading = true;
      const pageSize = getPageSize();
      console.log('コンテンツをもっと読み込み中、ページ:', currentPage + 1, 'ページサイズ:', pageSize, 'フィルター:', currentFilter);
      
      // 読み込みインジケータを表示
      const loadingIndicator = document.getElementById('loading-indicator');
      if (loadingIndicator) loadingIndicator.classList.remove('d-none');
      
      // 読み込みボタンを非表示
      const loadMoreButton = document.getElementById('load-more-button');
      if (loadMoreButton) loadMoreButton.classList.add('d-none');
      
      try {
        currentPage++;
        const timestamp = new Date().getTime(); // キャッシュ防止のためタイムスタンプを追加
        const url = `/api/release-notes?page=${currentPage}&pageSize=${pageSize}&lang=ja&_t=${timestamp}`;
        console.log('リクエストURL:', url);
        
        const response = await fetch(url);
        
        if (!response.ok) {
          throw new Error(`リクエスト失敗: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('読み込んだデータ:', data);
        
        // hasMoreContentフラグを更新
        // 「すべて」オプションでは、APIが明示的にfalseを返さない限り、読み込み可能な状態を維持
        if (currentFilter === 'all') {
          hasMoreContent = data.meta?.hasMore !== false;
          if (data.items && data.items.length > 0) {
            hasMoreContent = true; // データが返される限り、まだ続きがあると仮定
          }
        } else {
          hasMoreContent = data.meta?.hasMore || false;
        }
        console.log('さらにコンテンツがあるか:', hasMoreContent);
        
        // データがなければ「これ以上コンテンツはありません」を表示
        if (!data.items || data.items.length === 0) {
          if (currentPage > 10 && currentFilter === 'all') {
            // 「すべて」フィルターでは、多くのページを読み込んでも新しいデータがない場合のみ「これ以上コンテンツはありません」を表示
            hasMoreContent = false;
            const noMoreContent = document.getElementById('no-more-content');
            if (noMoreContent) noMoreContent.classList.remove('d-none');
            console.log('アイテムがロードされず、最大ページ数に達しました');
          } else if (currentFilter !== 'all') {
            // 「すべて」以外のフィルターは通常の論理に従う
            hasMoreContent = false;
            const noMoreContent = document.getElementById('no-more-content');
            if (noMoreContent) noMoreContent.classList.remove('d-none');
            console.log('アイテムがロードされませんでした');
          } else {
            // 「すべて」フィルターでは、データがなくても読み込み可能な状態を維持
            console.log('今回はアイテムがロードされませんでしたが、読み込み可能な状態を維持します');
          }
        } else {
          // 読み込まれたアイテムリストに追加
          allLoadedItems = [...allLoadedItems, ...data.items];
          console.log('読み込まれたアイテム総数:', allLoadedItems.length);
          
          // 新しいコンテンツをレンダリング
          renderNewItems(data.items);
          console.log('新しいコンテンツの読み込みとレンダリングに成功しました');
          
          // 読み込みボタンとメッセージの表示を更新
          updateLoadMoreVisibility();
        }
      } catch (error) {
        console.error('コンテンツをもっと読み込む際のエラー:', error);
        // エラー時に読み込みボタンを再表示
        if (loadMoreButton) loadMoreButton.classList.remove('d-none');
      } finally {
        isLoading = false;
        const loadingIndicator = document.getElementById('loading-indicator');
        if (loadingIndicator) loadingIndicator.classList.add('d-none');
      }
    }
    
    // フィルターを適用
    function applyFilter(filterValue) {
      console.log('フィルターを適用:', filterValue);
      
      // フィルターが変更された場合、ページカウントをリセット
      if (currentFilter !== filterValue.toLowerCase()) {
        currentPage = 1;
        hasMoreContent = true; // フィルター変更時に、さらにコンテンツがあると仮定
      }
      
      currentFilter = filterValue.toLowerCase();
      
      // 現在のフィルターを適用
      applyCurrentFilter();
    }
    
    // 「もっと読み込む」ボタンのクリックイベントを設定
    const loadMoreButton = document.getElementById('load-more-button');
    if (loadMoreButton) {
      console.log('「もっと読み込む」ボタンのクリックイベントを設定');
      const btn = loadMoreButton.querySelector('button');
      if (btn) {
        btn.addEventListener('click', () => {
          console.log('もっと読み込むボタンがクリックされました');
          loadMoreContent();
        });
      }
    } else {
      console.error('「もっと読み込む」ボタンが見つかりません');
    }
    
    // 手動テスト用関数
    window.testLoad = loadMoreContent;
    
    // スクロール検出関数
    function handleScroll() {
      // 読み込みが必要かどうかを確認
      if (isLoading || !hasMoreContent) {
        return;
      }
      
      const scrollPosition = window.innerHeight + window.scrollY;
      const pageHeight = document.body.offsetHeight;
      const scrollThreshold = 0.8; // ページの80%までスクロールした時に読み込みをトリガー
      
      if (scrollPosition >= pageHeight * scrollThreshold) {
        console.log('スクロール読み込みをトリガー、現在位置:', {
          scrollPosition,
          pageHeight,
          percentage: (scrollPosition / pageHeight).toFixed(2),
          filter: currentFilter
        });
        loadMoreContent();
      }
    }
    
    // スクロールリスナーを設定
    console.log('スクロールリスナーを設定');
    window.addEventListener('scroll', handleScroll);
    
    // フィルターリスナーを設定
    console.log('フィルターリスナーを設定');
    document.querySelectorAll('.form-check-input').forEach(radio => {
      radio.addEventListener('change', (e) => {
        const target = e.target;
        if (!(target instanceof HTMLInputElement)) return;
        
        console.log('フィルター変更:', target.value);
        applyFilter(target.value);
      });
    });
    
    // 初期化: デフォルトフィルターを適用
    applyFilter('all');
  });
</script>
---
import PageHeader from "../../../components/PageHeader.astro";
import Layout from "../../../layouts/Layout.astro";
import { getPage, listTutorialArticles } from "../../../utils";

const page = await getPage("tutorials");

const title = page.title_ja || page.title;
const description = page.description_ja || page.description;
const keywords = page.keywords_ja || page.keywords;
const tutorialsData = await listTutorialArticles({ pageSize: 100 });

// シリーズごとにチュートリアルを動的にグループ化
const tutorials = tutorialsData.data.reduce((acc, item) => {
  const seriesTitle = item.serials?.title_ja || item.serials?.title || '未分類';
  const seriesDescription = item.serials?.description_ja || item.serials?.description || "";

  // アキュムレータにシリーズが存在しない場合は初期化
  if (!acc[seriesTitle]) {
    acc[seriesTitle] = {
      description: seriesDescription,
      articles: [],
      scenarios: new Map(), // シリーズ内のユニークなシナリオを格納
    };
  }

  // チュートリアルを該当するシリーズに追加
  acc[seriesTitle].articles.push({
    id: item.id,
    title: item.title_ja || item.title,
    link: `/ja/tutorials/${item.slug}`,
    description: item.description_ja || item.description || "",
    knowledge_tags: item.knowledge_tag,
    scenario_tags: item.scenario_tags,
    series: seriesTitle, // フィルタリング用
  });

  // シナリオを収集
  item.scenario_tags.forEach(tag => {
    if (!acc[seriesTitle].scenarios.has(tag.id)) {
      acc[seriesTitle].scenarios.set(tag.id, tag);
    }
  });

  return acc;
}, {});

// チュートリアルオブジェクトをシリーズオブジェクトの配列に変換（マッピングを容易にするため）
const tutorialSeries = Object.entries(tutorials).map(([seriesTitle, seriesData]) => ({
  seriesTitle,
  description: seriesData.description,
  articles: seriesData.articles,
  scenarios: Array.from(seriesData.scenarios.values()),
}));

// 全てのユニークな知識ポイントを収集
const knowledgePointsMap = new Map();

tutorialsData.data.forEach(item => {
  item.knowledge_tag.forEach(tag => {
    if (!knowledgePointsMap.has(tag.id)) {
      knowledgePointsMap.set(tag.id, tag);
    }
  });
});

const knowledgePoints = Array.from(knowledgePointsMap.values());

// グローバルシナリオタグ（シリーズに関連しないシナリオ）を収集
const globalScenariosMap = new Map();

tutorialsData.data.forEach(item => {
  item.scenario_tags.forEach(tag => {
    if (!tag.series_related && !globalScenariosMap.has(tag.id)) { // シリーズに属するかどうかを示すフィールドがあると仮定
      globalScenariosMap.set(tag.id, tag);
    }
  });
});

const globalScenarios = Array.from(globalScenariosMap.values());
---

<Layout title={title} description={description} keywords={keywords}>
  <PageHeader title={title} description={description} />
  <section class="section">
    <div class="container">
      <!-- 検索バーと切り替えボタン -->
      <div class="tutorials-search-and-toggle">
        <input type="text" id="searchInput" class="tutorials-search-bar" placeholder="タイトルまたはタグで検索..." />
        <button id="toggleButton" class="tutorials-toggle-button">知識ポイントに切り替え</button>
      </div>

      <div class="tutorials-content">
        <!-- 左パネル -->
        <div class="tutorials-left-panel">
          <!-- シリーズリスト -->
          <ul id="leftList" class="tutorials-series-list">

            <h5 style="color: gray">シリーズ:</h5>
            {tutorialSeries.map(series => (
                <li class="tutorials-series-item">
                  <a href="#" class="tutorials-series-link" data-filter-type="series" data-filter-value={series.seriesTitle}>
                    {series.seriesTitle} &gt;
                  </a>
                  {series.description && <p class="tutorials-series-description">{series.description}</p>}
                  <!-- シリーズ下のシナリオタグ -->
                  <div class="tutorials-scenario-keywords">
                    {series.scenarios.map(scenario => (
                        <a href="#" class="tutorials-scenario-tag tutorials-tag" data-filter-type="scenario" data-filter-value={scenario.title_ja || scenario.title}>
                          {scenario.title_ja || scenario.title}
                        </a>
                    ))}
                  </div>
                </li>
              ))}
              </ul>

              <!-- グローバルシナリオタグリスト -->
              <h5 style="color: gray">シナリオ:</h5>
              <ul id="globalScenarioList" class="tutorials-scenario-list">
                {globalScenarios.map(scenario => (
                    <li class="tutorials-scenario-item">
                      <a href="#" class="tutorials-scenario-link" data-filter-type="scenario" data-filter-value={scenario.title_ja || scenario.title}>
                        {scenario.title_ja || scenario.title}
                      </a>
                    </li>
                ))}
              </ul>

              <!-- 知識ポイントリスト（初期は非表示） -->
              <ul id="knowledgeList" class="tutorials-knowledge-list" style="display: none;">
                {knowledgePoints.map(knowledge => (
                    <li class="tutorials-knowledge-item">
                      <a href="#" class="tutorials-knowledge-link" data-filter-type="knowledge" data-filter-value={knowledge.title_ja || knowledge.title}>
                        {knowledge.title_ja || knowledge.title}
                      </a>
                    </li>
                ))}
              </ul>
              </div>

              <!-- セパレーター -->
              <div class="tutorials-separator"></div>

              <!-- 右パネル：記事リスト -->
              <div class="tutorials-right-panel">
                {tutorialSeries.map(series => (
                    <div class="tutorials-series-articles">
                      {series.articles.map(article => (
                          <div class="tutorials-article" data-series={series.seriesTitle.toLowerCase()} data-knowledge={article.knowledge_tags.map(tag => (tag.title_ja || tag.title).toLowerCase()).join(' ')} data-scenario={article.scenario_tags.map(tag => (tag.title_ja || tag.title).toLowerCase()).join(' ')}>
                            <a href={article.link} class="tutorials-article-title">{article.title}</a>
                            {article.description && <p class="tutorials-article-description">{article.description}</p>}
                            <div class="tutorials-tags">
                              {article.knowledge_tags.map(tag => (
                                  tag.url ? (
                                      <a href={tag.url} class="tutorials-tag" data-filter-type="knowledge" data-filter-value={tag.title_ja || tag.title}>{tag.title_ja || tag.title}</a>
                                  ) : (
                                      <a href="#" class="tutorials-tag" data-filter-type="knowledge" data-filter-value={tag.title_ja || tag.title}>{tag.title_ja || tag.title}</a>
                                  )
                              ))}
                              {article.scenario_tags.map(tag => (
                                  tag.url ? (
                                      <a href={tag.url} class="tutorials-tag" data-filter-type="scenario" data-filter-value={tag.title_ja || tag.title}>{tag.title_ja || tag.title}</a>
                                  ) : (
                                      <a href="#" class="tutorials-tag" data-filter-type="scenario" data-filter-value={tag.title_ja || tag.title}>{tag.title_ja || tag.title}</a>
                                  )
                              ))}
                            </div>
                          </div>
                      ))}
                    </div>
                  ))}
                  </div>
                  </div>
                  </div>
                  </section>

                  <script>
                      document.addEventListener('DOMContentLoaded', function() {
                        const searchInput = document.getElementById('searchInput');
                        const leftList = document.getElementById('leftList');
                        const knowledgeList = document.getElementById('knowledgeList');
                        const globalScenarioList = document.getElementById('globalScenarioList');
                        const toggleButton = document.getElementById('toggleButton');
                        const articles = document.querySelectorAll('.tutorials-article');
                        const seriesLinks = document.querySelectorAll('.tutorials-series-link');
                        const knowledgeLinks = document.querySelectorAll('.tutorials-knowledge-link');
                        const scenarioLinks = document.querySelectorAll('.tutorials-scenario-link');
                        const scenarioTags = document.querySelectorAll('.tutorials-scenario-tag');
                        const tagLinks = document.querySelectorAll('.tutorials-tag'); // シナリオタグを含む

                        // 複数のアクティブなフィルターを格納するためにセットを使用
                        const activeFilters = {
                          series: new Set(),
                          knowledge: new Set(),
                          scenario: new Set()
                        };

                        // 検索機能
                        searchInput.addEventListener('input', function() {
                          filterArticles();
                        });

                        // 切り替えボタンの機能
                        toggleButton.addEventListener('click', function() {
                          const isSeriesVisible = leftList.style.display !== 'none';
                          if (isSeriesVisible) {
                            leftList.style.display = 'none';
                            globalScenarioList.style.display = 'none';
                            knowledgeList.style.display = 'block';
                            toggleButton.textContent = 'シナリオに切り替え';
                            toggleButton.classList.add('active');
                          } else {
                            leftList.style.display = 'block';
                            globalScenarioList.style.display = 'block';
                            knowledgeList.style.display = 'none';
                            toggleButton.textContent = '知識ポイントに切り替え';
                            toggleButton.classList.remove('active');
                          }
                          // すべてのアクティブなフィルターをクリア
                          activeFilters.series.clear();
                          activeFilters.knowledge.clear();
                          activeFilters.scenario.clear();
                          // すべてのアクティブなスタイルを削除
                          updateActiveStyles();
                          // 検索入力をクリア
                          searchInput.value = '';
                          filterArticles();
                        });

                        // シリーズ、知識ポイント、シナリオタグのクリックでフィルタリング
                        function handleFilterClick(event) {
                          event.preventDefault();
                          const filterType = event.target.getAttribute('data-filter-type');
                          const filterValue = event.target.getAttribute('data-filter-value'); // 既に小文字

                          if (filterType && filterValue) {
                            if (filterType === 'series') {
                              if (activeFilters.series.has(filterValue)) {
                                activeFilters.series.delete(filterValue);
                              } else {
                                activeFilters.series.add(filterValue);
                              }
                            } else if (filterType === 'knowledge') {
                              if (activeFilters.knowledge.has(filterValue)) {
                                activeFilters.knowledge.delete(filterValue);
                              } else {
                                activeFilters.knowledge.add(filterValue);
                              }
                            } else if (filterType === 'scenario') {
                              if (activeFilters.scenario.has(filterValue)) {
                                activeFilters.scenario.delete(filterValue);
                              } else {
                                activeFilters.scenario.add(filterValue);
                              }
                            }
                            // アクティブなスタイルを更新
                            updateActiveStyles();
                            // 記事をフィルタリング
                            filterArticles();
                          }
                        }

                        function updateActiveStyles() {
                          // シリーズリンクのアクティブ状態を更新
                          seriesLinks.forEach(link => {
                            const value = link.getAttribute('data-filter-value');
                            if (activeFilters.series.has(value)) {
                              link.classList.add('active');
                            } else {
                              link.classList.remove('active');
                            }
                          });

                          // 知識ポイントリンクのアクティブ状態を更新
                          knowledgeLinks.forEach(link => {
                            const value = link.getAttribute('data-filter-value');
                            if (activeFilters.knowledge.has(value)) {
                              link.classList.add('active');
                            } else {
                              link.classList.remove('active');
                            }
                          });

                          // シナリオリンクのアクティブ状態を更新
                          scenarioLinks.forEach(link => {
                            const value = link.getAttribute('data-filter-value');
                            if (activeFilters.scenario.has(value)) {
                              link.classList.add('active');
                            } else {
                              link.classList.remove('active');
                            }
                          });

                          // 右パネルの記事タグのアクティブ状態を更新
                          tagLinks.forEach(link => {
                            const filterType = link.getAttribute('data-filter-type');
                            const value = link.getAttribute('data-filter-value');
                            if (
                                (filterType === 'knowledge' && activeFilters.knowledge.has(value)) ||
                                (filterType === 'scenario' && activeFilters.scenario.has(value))
                            ) {
                              link.classList.add('active');
                            } else {
                              link.classList.remove('active');
                            }
                          });
                        }

                        seriesLinks.forEach(link => link.addEventListener('click', handleFilterClick));
                        knowledgeLinks.forEach(link => link.addEventListener('click', handleFilterClick));
                        scenarioLinks.forEach(link => link.addEventListener('click', handleFilterClick));
                        tagLinks.forEach(link => link.addEventListener('click', handleFilterClick)); // シナリオタグを含む

                        // 記事をフィルタリングする関数
                        function filterArticles() {
                          const searchTerm = searchInput.value.toLowerCase();

                          articles.forEach(article => {
                            const title = article.querySelector('.tutorials-article-title').textContent.toLowerCase();
                            const series = article.getAttribute('data-series'); // 既に小文字
                            const tags = (article.getAttribute('data-knowledge') + ' ' + article.getAttribute('data-scenario')).toLowerCase();

                            // シリーズも検索条件に含める
                            const allSearchableText = `${title} ${series} ${tags}`;

                            // 検索語に一致するかどうかを判断
                            const matchesSearch = allSearchableText.includes(searchTerm);

                            // シリーズフィルターに一致するかどうかを判断
                            let matchesSeries = true;
                            if (activeFilters.series.size > 0) {
                              matchesSeries = activeFilters.series.has(series);
                            }

                            // 知識ポイントフィルターに一致するかどうかを判断
                            let matchesKnowledge = true;
                            if (activeFilters.knowledge.size > 0) {
                              matchesKnowledge = Array.from(activeFilters.knowledge).some(filter => tags.includes(filter));
                            }

                            // シナリオフィルターに一致するかどうかを判断
                            let matchesScenario = true;
                            if (activeFilters.scenario.size > 0) {
                              matchesScenario = Array.from(activeFilters.scenario).some(filter => tags.includes(filter));
                            }

                            // 検索とすべてのフィルター条件に一致する記事のみを表示
                            if (matchesSearch && matchesSeries && matchesKnowledge && matchesScenario) {
                              article.style.display = '';
                            } else {
                              article.style.display = 'none';
                            }
                          });
                        }

                        // 初期化時にすべての記事を表示
                        filterArticles();
                      });
                      </script>

                  </Layout>

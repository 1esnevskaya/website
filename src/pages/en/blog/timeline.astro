---
import FormattedDate from "../../../components/FormattedDate.astro";
import PageHeader from "../../../components/PageHeader.astro";
import Layout from "../../../layouts/Layout.astro";
import { listReleaseNotes, url, processor } from "../../../utils";

const description = "Learn about the latest features, improvements, and bug fixes.";
const basepath = "/en/blog";
// Add this function to process markdown content
async function renderMarkdown(content: string) {
  // First process with existing processor
  const { code } = await processor.render(content || '');
  
  // Then adjust heading levels by replacing h1-h6 tags
  const adjustedCode = code
    .replace(/<h1/g, '<h3')
    .replace(/<\/h1>/g, '</h3>')
    .replace(/<h2/g, '<h4')
    .replace(/<\/h2>/g, '</h4>')
    .replace(/<h3/g, '<h5')
    .replace(/<\/h3>/g, '</h5>')
    .replace(/<h4/g, '<h6')
    .replace(/<\/h4>/g, '</h6>')
    .replace(/<h5/g, '<h6')
    .replace(/<\/h5>/g, '</h6>')
    .replace(/<h6/g, '<h6')
    .replace(/<\/h6>/g, '</h6>');
    
  return adjustedCode;
}

// Get first page of data
const { data: releaseNotes, meta: initialMeta } = await listReleaseNotes({ page: 1, pageSize: 30 });

const allItems = await Promise.all(releaseNotes.map(async (article: any) => ({
  ...article,
  renderedContent: await renderMarkdown(article.content || '') // Process original content
})));

const filterTypes = [
  { id: 'all', label: 'All', value: 'all', className: '' },
  { id: 'milestone', label: 'Milestone', value: 'milestone', className: 'text-primary' },
  { id: 'latest', label: 'latest', value: 'latest', className: 'text-info' },
  { id: 'beta', label: 'beta', value: 'beta', className: 'text-warning' },
  { id: 'alpha', label: 'alpha', value: 'alpha', className: 'text-danger' }
];

// Add helper function to get tag style class
function getTagClassName(tag: string) {
  const filterType = filterTypes.find(f => f.value === tag.toLowerCase());
  return filterType ? `bg-${filterType.className.replace('text-', '')}` : 'bg-secondary';
}

const tabs = [
  { title: "Home", link: "/en/" },
  { title: "Blog", link: "/en/blog" },
  { title: "Release Notes", active: true }
];
---

<Layout title="Release Notes" description={description}>
  <PageHeader
    title="Release Notes"
    description={description}
    breadcrumb={tabs}
  />

  <section class="section">
    <div class="container">
      <div class="row justify-content-center">
        <div class="col-lg-12">
          <div class="filter-buttons text-center mb-4">
            {filterTypes.map(filter => (
              <div class="form-check form-check-inline">
                <input 
                  class="form-check-input" 
                  type="radio" 
                  name="filter-type"
                  id={`filter-${filter.id}`}
                  value={filter.value}
                  checked={filter.value === 'all'}
                />
                <label class={`form-check-label ${filter.className}`} for={`filter-${filter.id}`}>
                  {filter.label}
                </label>
              </div>
            ))}
          </div>
          <div class="timeline-page position-relative" id="timeline-container">
            {allItems.map(article => (
              <div class="timeline-item mt-4" data-tags={article.tags.join(',')}>
                <div class="row">
                  <div class="col-lg-3 col-md-3" style="width: 24.65%;">
                    <div class="duration date-label-left border rounded p-2 px-4 position-relative shadow">
                      <FormattedDate date={article.publishedAt} />
                    </div>
                  </div>

                  <div class="col-lg-9 col-md-9">
                    {article.isMilestone ? (
                      <div class="card event rounded shadow border-0 overflow-hidden float-start milestone">
                        {article.cover && (
                          <img src={url(article.cover.url)} class="img-fluid" alt={article.title} />
                        )}
                        <div class="card-body">
                          <h4>
                            <a href={`${basepath}/${article.slug}`}>
                              {article.title}
                            </a>
                          </h4>
                          <p class="mt-3 mb-0 text-muted">{article.description}</p>
                        </div>
                      </div>
                    ) : (
                      <div class="card event rounded shadow border-0 overflow-hidden float-start">
                        <div class="card-body">
                          <h5 class="h5">
                            <a href={`${basepath}/${article.slug}`}>
                              {article.title}
                            </a>
                          </h5>
                          <div class="text-muted mt-2" set:html={article.renderedContent} />
                          {article.tags.length > 0 && (
                            <div class="mt-2">
                              {article.tags.map((tag: string) => (
                                <span class={`badge me-1 ${getTagClassName(tag)}`}>{tag}</span>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          <!-- Loading indicator -->
          <div id="loading-indicator" class="text-center mt-4 d-none">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading more content...</p>
          </div>
          
          <!-- Load more button -->
          <div id="load-more-button" class="text-center mt-4">
            <button class="btn btn-primary">Load more</button>
          </div>
          
          <!-- No more content message -->
          <div id="no-more-content" class="text-center mt-4 d-none">
            <p class="text-muted">No more content to load</p>
          </div>
          
          <!-- Initial metadata -->
          <div id="initial-meta" class="d-none" data-meta={JSON.stringify(initialMeta)}></div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
.timeline-page:after {
  right: auto;
  left: 24%;
}

.card.event img {
  width: 100%;
  max-height: 300px;
  object-fit: cover;
}

.card.event {
  width: 100%;
}

@media (max-width: 767px) {
  .timeline-page:after {
    left: 0;
  }
}
</style>

<script is:inline>
  // Run after page load
  document.addEventListener('DOMContentLoaded', () => {
    // Get initial metadata
    const initialMeta = JSON.parse(document.getElementById('initial-meta')?.dataset.meta || '{}');
    let totalItemsLoaded = 0; // Track total items loaded regardless of filter
    let isLoading = false;
    let hasMoreContent = true;
    let currentFilter = 'all';
    let allLoadedItems = []; // Store all loaded items
    let maxPageLoaded = 0; // Track highest page loaded
    
    // Standard page size for all requests
    const pageSize = 30;
    
    // Special page size multiplier for milestone filter
    const milestoneMultiplier = 5; // Load 5 pages at once for milestone filter
    
    console.log('Page initialized', { 
      initialMeta, 
      hasMoreContent,
      totalItemsLoaded,
      currentFilter
    });

    // Render new articles to the page
    function renderNewItems(items, append = true) {
      const container = document.getElementById('timeline-container');
      if (!container) {
        console.error('Container element not found');
        return;
      }
      
      // If not in append mode, clear the container
      if (!append) {
        container.innerHTML = '';
      }
      
      console.log(`Rendering ${items.length} new items`);
      
      items.forEach(item => {
        const articleDiv = document.createElement('div');
        articleDiv.className = 'timeline-item mt-4';
        articleDiv.dataset.tags = item.tags.join(',');
        
        const articleHtml = `
          <div class="row">
            <div class="col-lg-3 col-md-3" style="width: 24.65%;">
              <div class="duration date-label-left border rounded p-2 px-4 position-relative shadow">
                ${formatDate(new Date(item.publishedAt))}
              </div>
            </div>

            <div class="col-lg-9 col-md-9">
              ${item.isMilestone ? `
                <div class="card event rounded shadow border-0 overflow-hidden float-start milestone">
                  ${item.cover ? `<img src="${item.cover.url}" class="img-fluid" alt="${item.title}" />` : ''}
                  <div class="card-body">
                    <h5>
                      <a href="/en/blog/${item.slug}">
                        ${item.title}
                      </a>
                    </h5>
                    <p class="mt-3 mb-0 text-muted">${item.description}</p>
                  </div>
                </div>
              ` : `
                <div class="card event rounded shadow border-0 overflow-hidden float-start">
                  <div class="card-body">
                    <h5>
                      <a href="/en/blog/${item.slug}">
                        ${item.title}
                      </a>
                    </h5>
                    <div class="text-muted mt-2">${item.renderedContent}</div>
                    ${item.tags.length > 0 ? `
                      <div class="mt-2">
                        ${item.tags.map(tag => `
                          <span class="badge me-1 ${getTagClassName(tag)}">${tag}</span>
                        `).join('')}
                      </div>
                    ` : ''}
                  </div>
                </div>
              `}
            </div>
          </div>
        `;
        
        articleDiv.innerHTML = articleHtml;
        container.appendChild(articleDiv);
      });
      
      // Apply current filter
      applyCurrentFilter();
    }
    
    // Initialize: collect initial items
    const initialItems = [];
    document.querySelectorAll('.timeline-item').forEach(item => {
      const dataItem = extractDataFromElement(item);
      if (dataItem) {
        initialItems.push(dataItem);
      }
    });
    allLoadedItems = [...initialItems];
    totalItemsLoaded = initialItems.length;
    console.log('Initial items collected:', initialItems.length);
    
    // Extract data from DOM element
    function extractDataFromElement(element) {
      try {
        const tagsAttr = element.dataset.tags || '';
        const tags = tagsAttr ? tagsAttr.split(',') : [];
        
        const titleElement = element.querySelector('h5 a, h4 a');
        const contentElement = element.querySelector('.text-muted.mt-2');
        const descriptionElement = element.querySelector('.mt-3.mb-0.text-muted');
        const dateElement = element.querySelector('.duration.date-label-left');
        
        return {
          title: titleElement ? titleElement.innerText : '',
          content: contentElement ? contentElement.innerHTML : '',
          description: descriptionElement ? descriptionElement.innerText : '',
          publishedAt: dateElement ? dateElement.innerText : '',
          tags: tags,
          slug: titleElement ? titleElement.getAttribute('href').split('/').pop() : '',
          isMilestone: element.querySelector('.milestone') !== null
        };
      } catch (error) {
        console.error('Error extracting data:', error);
        return null;
      }
    }
    
    // Format date
    function formatDate(date) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    }
    
    // Get tag class name
    function getTagClassName(tag) {
      const filterTypes = [
        { value: 'milestone', className: 'bg-primary' },
        { value: 'latest', className: 'bg-info' },
        { value: 'beta', className: 'bg-warning' },
        { value: 'alpha', className: 'bg-danger' }
      ];
      
      const filterType = filterTypes.find(f => f.value === tag.toLowerCase());
      return filterType ? filterType.className : 'bg-secondary';
    }
    
    // Apply current filter
    function applyCurrentFilter() {
      console.log('Applying current filter:', currentFilter);
      let visibleCount = 0;
      
      // Count visible items before filtering
      document.querySelectorAll('.timeline-item').forEach(item => {
        if (!(item instanceof HTMLElement)) return;
        
        const tagsAttr = item.dataset.tags || '';
        const tags = tagsAttr ? tagsAttr.split(',').map(t => t.toLowerCase()) : [];
        let isVisible = false;
        
        // Determine visibility based on filter
        if (currentFilter === 'all') {
          isVisible = true;
        } else if (currentFilter === 'milestone') {
          isVisible = item.querySelector('.milestone') !== null;
        } else {
          isVisible = tags.includes(currentFilter);
        }
        
        // Apply visibility
        item.style.display = isVisible ? 'block' : 'none';
        
        if (isVisible) {
          visibleCount++;
        }
      });
      
      console.log(`Filter applied: ${visibleCount} items visible out of ${allLoadedItems.length} total loaded items`);
      
      // Update load more button visibility based on visible items count
      updateLoadMoreVisibility(visibleCount);
    }
    
    // Update load more button and message visibility
    function updateLoadMoreVisibility(visibleCount) {
      const loadMoreButton = document.getElementById('load-more-button');
      const noMoreContent = document.getElementById('no-more-content');
      
      // Always show load more button unless we've explicitly reached the end
      const shouldShowLoadMore = hasMoreContent || (visibleCount < 20 && maxPageLoaded < 10);
      
      if (loadMoreButton) {
        loadMoreButton.style.display = shouldShowLoadMore ? 'block' : 'none';
      }
      
      if (noMoreContent) {
        noMoreContent.style.display = !shouldShowLoadMore ? 'block' : 'none';
      }
    }
    
    // Load more content
    async function loadMoreContent() {
      if (isLoading) {
        console.log('Loading in progress, please wait');
        return;
      }
      
      isLoading = true;
      console.log('Loading more content, totalItemsLoaded:', totalItemsLoaded, 'filter:', currentFilter);
      
      // Show loading indicator
      const loadingIndicator = document.getElementById('loading-indicator');
      if (loadingIndicator) loadingIndicator.classList.remove('d-none');
      
      // Hide load button
      const loadMoreButton = document.getElementById('load-more-button');
      if (loadMoreButton) loadMoreButton.classList.add('d-none');
      
      try {
        // Calculate which page to request based on total items loaded
        const nextPage = Math.floor(totalItemsLoaded / pageSize) + 1;
        maxPageLoaded = Math.max(maxPageLoaded, nextPage);
        
        // Determine how many pages to load at once (milestone gets multiple pages)
        const currentPageSize = pageSize;
        let pagesToLoad = 1;
        
        if (currentFilter === 'milestone') {
          pagesToLoad = milestoneMultiplier; // Load multiple pages for milestone
          console.log(`Loading ${pagesToLoad} pages for milestone filter`);
        }
        
        // Load all needed pages in parallel and combine results
        const allResults = [];
        const loadPromises = [];
        
        for (let i = 0; i < pagesToLoad; i++) {
          const pageToLoad = nextPage + i;
          const timestamp = new Date().getTime() + i; // Add timestamp to prevent caching
          const url = `/api/release-notes?page=${pageToLoad}&pageSize=${pageSize}&lang=en&_t=${timestamp}`;
          console.log(`Request URL (${i+1}/${pagesToLoad}):`, url);
          
          // Create promise for this page load
          const loadPromise = fetch(url)
            .then(response => {
              if (!response.ok) {
                throw new Error(`Request failed: ${response.status} ${response.statusText}`);
              }
              return response.json();
            })
            .then(data => {
              if (data.items && data.items.length > 0) {
                // Store page number with each item for debugging
                const itemsWithPage = data.items.map(item => ({
                  ...item,
                  _pageLoaded: pageToLoad
                }));
                allResults.push(...itemsWithPage);
              }
              // Return metadata from last page
              return data.meta;
            })
            .catch(error => {
              console.error(`Error loading page ${pageToLoad}:`, error);
              return null; // Return null for failed requests
            });
          
          loadPromises.push(loadPromise);
        }
        
        // Wait for all page loads to complete
        const metaResults = await Promise.all(loadPromises);
        console.log('Loaded data:', allResults.length, 'items across', pagesToLoad, 'pages');
        
        // Sort all results by publishedAt date to ensure correct order
        allResults.sort((a, b) => {
          // Sort by published date (most recent first)
          const dateA = new Date(a.publishedAt);
          const dateB = new Date(b.publishedAt);
          return dateB - dateA;
        });
        
        console.log('Results sorted by publishedAt date');
        
        // Use metadata from the last successful page load
        const lastValidMeta = metaResults.filter(meta => meta !== null).pop();
        
        // Check if we got items and if API explicitly says there's no more
        const receivedItems = allResults.length > 0;
        const apiSaysNoMore = lastValidMeta?.hasMore === false;
        
        // Only set hasMoreContent to false if API explicitly says no more AND we didn't get items
        hasMoreContent = receivedItems || !apiSaysNoMore;
        console.log('Has more content:', hasMoreContent, 'API says no more:', apiSaysNoMore, 'Received items:', receivedItems);
        
        // If no items at all, show "no more content"
        if (!receivedItems) {
          if (apiSaysNoMore) {
            hasMoreContent = false;
            const noMoreContent = document.getElementById('no-more-content');
            if (noMoreContent) noMoreContent.classList.remove('d-none');
            console.log('No more items to load');
          } else {
            // Empty response but API didn't say no more - might be temporary
            console.log('Empty response but API did not explicitly say no more content');
            hasMoreContent = true;
          }
        } else {
          // Update total items loaded - mark all pages as loaded
          totalItemsLoaded += allResults.length;
          
          // Clean up debug properties before adding to the main list
          const cleanResults = allResults.map(item => {
            const { _pageLoaded, ...cleanItem } = item;
            return cleanItem;
          });
          
          // Add to loaded items list
          allLoadedItems = [...allLoadedItems, ...cleanResults];
          console.log('Total loaded items:', allLoadedItems.length);
          
          // Render new content
          renderNewItems(cleanResults);
          console.log('Successfully loaded and rendered new content');
          
          // Apply current filter to show/hide based on filter
          applyCurrentFilter();
        }
      } catch (error) {
        console.error('Error loading more content:', error);
        // Show load button on error - don't give up on errors
        hasMoreContent = true;
        if (loadMoreButton) loadMoreButton.classList.remove('d-none');
      } finally {
        isLoading = false;
        const loadingIndicator = document.getElementById('loading-indicator');
        if (loadingIndicator) loadingIndicator.classList.add('d-none');
      }
    }
    
    // Apply filter
    function applyFilter(filterValue) {
      console.log('Applying filter:', filterValue);
      currentFilter = filterValue.toLowerCase();
      
      // Apply filter to current items
      applyCurrentFilter();
      
      // If filtered view has few visible items, automatically load more
      const visibleItems = document.querySelectorAll('.timeline-item').length;
      if (currentFilter === 'milestone' || visibleItems < 5 && totalItemsLoaded < 100) {
        console.log('Auto-loading more content due to filter change or few visible items:', visibleItems);
        loadMoreContent();
      }
    }
    
    // Set load more button click event
    const loadMoreButton = document.getElementById('load-more-button');
    if (loadMoreButton) {
      console.log('Setting up load more button click event');
      const btn = loadMoreButton.querySelector('button');
      if (btn) {
        btn.addEventListener('click', () => {
          console.log('Load more button clicked');
          loadMoreContent();
        });
      }
    } else {
      console.error('Load more button not found');
    }
    
    // Scroll detection function
    function handleScroll() {
      // Check if we need to load more
      if (isLoading) {
        return; // Still loading, don't trigger another load
      }
      
      const scrollPosition = window.innerHeight + window.scrollY;
      const pageHeight = document.body.offsetHeight;
      const scrollPercentage = scrollPosition / pageHeight;
      const scrollThreshold = 0.7; // More sensitive threshold - trigger loading at 70% scroll
      
      if (scrollPercentage >= scrollThreshold) {
        console.log('Scroll loading triggered at', Math.round(scrollPercentage * 100) + '%');
        
        // Even if hasMoreContent is false, try loading more if we haven't loaded much
        if (hasMoreContent || totalItemsLoaded < 200) {
          loadMoreContent();
        }
      }
    }
    
    // Set up scroll listener with debounce to avoid too many events
    console.log('Setting up scroll listener');
    let scrollTimeout;
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(handleScroll, 100);
    });
    
    // Also check scroll position every few seconds in case user is at bottom but not scrolling
    setInterval(() => {
      if (!isLoading && (hasMoreContent || totalItemsLoaded < 200)) {
        const scrollPosition = window.innerHeight + window.scrollY;
        const pageHeight = document.body.offsetHeight;
        const scrollPercentage = scrollPosition / pageHeight;
        
        if (scrollPercentage > 0.9) {
          console.log('Timer check: near bottom of page, loading more content');
          loadMoreContent();
        }
      }
    }, 3000);
    
    // Set up filter listeners
    console.log('Setting up filter listeners');
    document.querySelectorAll('.form-check-input').forEach(radio => {
      radio.addEventListener('change', (e) => {
        const target = e.target;
        if (!(target instanceof HTMLInputElement)) return;
        
        console.log('Filter changed:', target.value);
        applyFilter(target.value);
      });
    });
    
    // Initialize: apply default filter
    applyFilter('all');
  });
</script>
---
import FormattedDate from "../../../components/FormattedDate.astro";
import PageHeader from "../../../components/PageHeader.astro";
import Toc from "../../../components/Toc.astro";
import Layout from "../../../layouts/Layout.astro";
import { getTutorialArticle, url } from "../../../utils";

const { slug } = Astro.params;
const { data, headings, html } = await getTutorialArticle(slug);
if (!data) {
  return new Response("Not found", { status: 404 });
}
const title = data.title;
const keywords = (data.tags || []).map((tag: any) => tag.title).join(",");
const description = data.description;
const basepath = "/en/tutorials";
const tabs = [
  {
    title: "Home",
    link: "/en/",
  },
  {
    title: "Tutorials",
    link: basepath,
  },
  {
    title: 'Detail',
    active: true,
  },
];
---
<Layout title={title} description={description} keywords={keywords}>
  <PageHeader title={title} description={description} breadcrumb={tabs}>
    <div>
      {
          data.author && (
              <span title={data.author}>
            {data.author}
                <span style="opacity: 0.3; display:inline-block; padding: 0 .8em;">
              |
            </span>
          </span>
          )
      }
      <FormattedDate date={data.publishedAt || data.createdAt} />
    </div>
  </PageHeader>
  <section class="section bg-white-color">
    <main
        class={headings.length > 0 ? "container blog-container row" : "container"}
    >
      {
        headings.length > 0 ? (
            <>
              <div class="col-md-9 col-18 markdown-body">
                <Fragment set:html={html} />
              </div>
              <div class="col-md-3 col-6 markdown-toc">
                <Toc headings={headings} />
              </div>
            </>
        ) : (
            <>
              <Fragment set:html={html} />
            </>
        )
      }
    </main>
  </section>

  <!-- 模态框容器 -->
  <div id="image-modal" class="image-modal">
    <span id="close-modal" class="close">&times;</span>
    <img class="modal-content" id="modal-image">
  </div>
</Layout>

<style>
  main {
    width: 100%;
    margin: 0 auto;
    padding: 0 20px;
  }

  /* 模态框样式 */
  .image-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    padding-top: 60px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.8);
  }

  .modal-content {
    margin: auto;
    display: block;
    max-width: 80%;
    max-height: 80%;
  }

  .close {
    position: absolute;
    top: 20px;
    right: 35px;
    color: #fff;
    font-size: 40px;
    font-weight: bold;
    cursor: pointer;
  }

  .close:hover,
  .close:focus {
    color: #bbb;
    text-decoration: none;
    cursor: pointer;
  }
</style>

<script>
  // 监听图片点击事件
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('image-modal');
    const modalImg = document.getElementById('modal-image');
    const closeModal = document.getElementById('close-modal');

    // 查找所有文章中的图片
    document.querySelectorAll('.markdown-body img').forEach(img => {
      img.style.cursor = 'zoom-in';
      img.addEventListener('click', () => {
        modal.style.display = 'block';
        modalImg.src = img.src;
      });
    });

    // 关闭模态框
    closeModal.onclick = () => {
      modal.style.display = 'none';
    };

    // 点击模态框外部区域关闭
    window.onclick = (event) => {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    };
  });
</script>

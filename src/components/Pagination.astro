---
interface Props {
  basepath?: string;
  currentPage?: number | string;
  pageSize?: number;
  total?: number;
  totalPages?: number | string;
}

const { basepath, currentPage = 1, totalPages = 1 } = Astro.props;

// Ensure currentPage and totalPages are numbers
const currentPageNum = typeof currentPage === 'string' ? parseInt(currentPage) : currentPage;
const totalPagesNum = typeof totalPages === 'string' ? parseInt(totalPages) : totalPages;

// 生成分页数组的函数
const generatePagination = (current: number, total: number, maxVisible: number = 3) => {
  const pages = [];
  const half = Math.floor(maxVisible / 2);

  let start = Math.max(1, current - half);
  let end = Math.min(total, current + half);

  if (end - start + 1 < maxVisible) {
    if (current <= half) {
      end = Math.min(total, end + (maxVisible - (end - start + 1)));
    } else if (total - current < half) {
      start = Math.max(1, start - (maxVisible - (end - start + 1)));
    }
  }

  if (start > 1) pages.push(1);
  if (start > 2) pages.push('...');

  for (let i = start; i <= end; i++) {
    pages.push(i);
  }

  if (end < total - 1) pages.push('...');
  if (end < total) pages.push(total);

  return pages;
};

const pages = generatePagination(currentPageNum, totalPagesNum, 3);
if (totalPagesNum < 2) {
  return;
}
const previousPage = currentPageNum - 1;
---

<nav aria-label="Page navigation example">
  <ul class="pagination" style="justify-content: center; margin-top: 6rem;">
    {
      previousPage >= 1 ? (
          <li class="page-item">
            <a class="page-link" href={previousPage === 1 ? basepath : `${basepath}/page/${previousPage}`}>
              <span class="desktop-text">Previous</span>
              <span class="mobile-icon">&lt;</span>
            </a>
          </li>
      ) : (
          <li class="page-item disabled">
          <span class="page-link">
            <span class="desktop-text">Previous</span>
            <span class="mobile-icon">&lt;</span>
          </span>
          </li>
      )
    }
    {
      pages.map((page) => {
        if (page === '...') {
          return (
              <li class="page-item disabled">
                <span class="page-link">...</span>
              </li>
          );
        } else if (page == currentPageNum) {
          return (
              <li class="page-item active">
                <span class="page-link">{page}</span>
              </li>
          );
        } else if (page === 1) {
          return (
              <li class="page-item">
                <a class="page-link" href={basepath}>
                  {page}
                </a>
              </li>
          );
        } else {
          return (
              <li class="page-item">
                <a class="page-link" href={`${basepath}/page/${page}`}>
                  {page}
                </a>
              </li>
          );
        }
      })
    }
    {
      currentPageNum < totalPagesNum ? (
          <li class="page-item">
            <a class="page-link" href={`${basepath}/page/${currentPageNum + 1}`}>
              <span class="desktop-text">Next</span>
              <span class="mobile-icon">&gt;</span>
            </a>
          </li>
      ) : (
          <li class="page-item disabled">
          <span class="page-link">
            <span class="desktop-text">Next</span>
            <span class="mobile-icon">&gt;</span>
          </span>
          </li>
      )
    }
  </ul>
</nav>


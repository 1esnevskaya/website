---
export interface DemoStep {
  id: string;
  title: string;
  description: string;
  image?: string;
  button?: {
    id: string;
    label: string;
    position: {
      left?: string;
      right?: string;
      top: string;
    };
    balloonLength?: string;
    balloonPos: string;
  };
}

export interface DemoGuide {
  title: string;
  subtitle?: string;
  mainSteps: Array<{
    number: string;
    title: string;
    id: string;
    targetStepId?: string;
  }>;
  steps: DemoStep[];
}

interface Props {
  guides: DemoGuide;
}

const { guides } = Astro.props;
---

<div class="steps-guide">
  <div class="section-title">
    <h3 class="title mb-4">{guides.title}</h3>
    {guides.subtitle && <p class="text-muted para-desc mx-auto mb-0">{guides.subtitle}</p>}
  </div>
  <div class="row">
    {guides.mainSteps.map((step, index) => (
      <div class="col-md-4">
        <div class={`card features feature-clean work-process bg-transparent border-0 text-center ${index < guides.mainSteps.length - 1 ? 'process-arrow' : ''}`}>
          <div class={`card-body steps-title ${step.id}`} id={step.id}>
            <h6 class="text-dark">
              <span class="h2 fw-bold step">{step.number}. </span>{step.title}
            </h6>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<div class="demo-wrap">
  {guides.steps[0]?.image && (
    <img
      src={guides.steps[0]?.image}
      alt="NocoBase 演示界面"
      class="img-fluid rounded-md shadow-lg"
      style="z-index: 0;"
    />
  )}

  <div class="steps-wrap">
    {guides.steps.map((step, index) => (
      <div class={`demo_step ${index === 0 ? 'demo_step_start' : ''}`} data-step={index}>
        {step.image && (
          <img
            data-src={step.image}
            src={index === 0 ? step.image : ""}
            alt="NocoBase 演示界面"
          />
        )}
        {step.button && (
          <div
            class="demo-button demo_tooltip"
            data-step-button={index}
            aria-label={step.button.label}
            data-balloon-length={step.button.balloonLength || "medium"}
            data-balloon-pos={step.button.balloonPos}
            style={`${step.button.position.left ? `left: ${step.button.position.left};` : ''}${step.button.position.right ? `right: ${step.button.position.right};` : ''}top: ${step.button.position.top};`}
          >
            <svg
              width="80"
              height="80"
              viewBox="0 0 45 45"
              xmlns="http://www.w3.org/2000/svg"
              stroke="#fa541c"
              aria-label="interactive-button"
            >
              <g
                fill="none"
                fill-rule="evenodd"
                transform="translate(1 1)"
                stroke-width="2"
              >
                <circle
                  cx="22"
                  cy="22"
                  r="6"
                  stroke-opacity="0"
                >
                  <animate
                    attributeName="r"
                    begin="1.5s"
                    dur="3s"
                    values="6;22"
                    calcMode="linear"
                    repeatCount="indefinite"
                  />
                  <animate
                    attributeName="stroke-opacity"
                    begin="1.5s"
                    dur="3s"
                    values="1;0"
                    calcMode="linear"
                    repeatCount="indefinite"
                  />
                  <animate
                    attributeName="stroke-width"
                    begin="1.5s"
                    dur="3s"
                    values="2;0"
                    calcMode="linear"
                    repeatCount="indefinite"
                  />
                </circle>
                <circle cx="22" cy="22" r="8">
                  <animate
                    attributeName="r"
                    begin="0s"
                    dur="1.5s"
                    values="6;1;2;3;4;5;6"
                    calcMode="linear"
                    repeatCount="indefinite"
                  />
                </circle>
                <circle 
                  cx="22" 
                  cy="22" 
                  r="3" 
                  fill="#fa541c" 
                  stroke="none"
                />
              </g>
            </svg>
          </div>
        )}
        {step.image === undefined && (
          <div class="chapter-overlay">
            <div class="chapter-content">
              <div class="chapter-number">{step.id}</div>
              <br>
              <div class="chapter-title">{step.title}</div>
            </div>
          </div>
        )}
      </div>
    ))}
  </div>
</div>

<style>
  /* 步骤导航样式 */
  .steps-guide {
    margin-bottom: 2rem;
  }

  .work-process {
    position: relative;
  }

  .work-process.process-arrow:after {
    content: '';
    position: absolute;
    width: 50%;
    height: 20px;
    top: 8px;
    left: 78%;
    background: url("../images/process.png") center center no-repeat;
  }

  .work-process .step {
    opacity: 0.3;
  }

  .steps-title {
    cursor: pointer;
    padding: 1.5rem 1rem;
    transition: all 0.3s ease;
  }

 

  .card-body h6 {
    margin-bottom: 0;
  }

  /* 激活状态的步骤样式 */
  .steps-guide .active h6 {
    color: #2f55d4 !important;
  }

  .steps-guide .active .step {
    opacity: 1 !important;
  }

  /* 演示区域样式 */
  .demo-wrap {
    position: relative;
    display: block;
    width: 100%;
  }

  .steps-wrap {
    opacity: 0;
  }

  .steps-wrap.loaded {
    opacity: 1;
  }

  /* 步骤样式 */
  .demo_step {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
  }

  .demo_step.demo_step_start {
    display: block;
  }

  .demo_step img {
    width: 100%;
    height: auto;
    display: block;
  }

  /* 交互按钮样式 - 使用更具体的选择器防止冲突 */
  .demo-wrap .demo-button {
    position: absolute !important;
    width: 80px !important;
    height: 80px !important;
    display: none !important;
    cursor: pointer !important;
    z-index: 10 !important;
    border-radius: 50% !important;
    align-items: center !important;
    justify-content: center !important;
    transition: all 0.3s ease !important;
    border: none !important;
    background: none !important;
    padding: 0 !important;
  }

  .demo-wrap .demo-button.show {
    display: flex !important;
  }

  .demo-wrap .demo-button:hover {
    transform: scale(1.1) !important;
  }

  .demo-wrap .demo-button svg {
    width: 100% !important;
    height: 100% !important;
  }

  /* 移除默认tooltip的before伪元素，但保留我们自定义的箭头 */
  .demo_tooltip:not(.auto-tooltip)::before {
    display: none !important;
  }

  .demo_tooltip:hover:not(.auto-tooltip)::before {
    display: none !important;
  }

  /* 提示框基础样式 */
  .demo-button::after {
    content: attr(aria-label);
    position: absolute;
    background: rgba(250, 84, 28, 0.9);
    color: white;
    padding: 10px 14px;
    border-radius: 4px;
    font-size: 14px;
    font-weight: normal;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    z-index: 100;
    max-width: 200px;
    word-wrap: break-word;
    white-space: normal;
    line-height: 1.4;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: all 0.15s ease-out;
  }
  
  /* 显示提示框时的样式 */
  .demo-button.auto-tooltip::after {
    opacity: 1;
    visibility: visible;
  }

  /* 箭头基础样式 */
  .demo-button::before {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    z-index: 100;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: all 0.15s ease-out;
  }
  
  /* 显示箭头时的样式 */
  .demo-button.auto-tooltip::before {
    opacity: 1;
    visibility: visible;
  }

  /* 上方提示 */
  .demo-button.auto-tooltip[data-balloon-pos="up"]::after {
    bottom: 100%;
    left: 50%;
    margin-bottom: 8px;
    transform: translateX(-50%);
  }

  .demo-button.auto-tooltip[data-balloon-pos="up"]::before {
    bottom: 100%;
    left: 50%;
    margin-bottom: -2px;
    transform: translateX(-50%);
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-top: 8px solid rgba(250, 84, 28, 0.9);
  }

  /* 下方提示 */
  .demo-button.auto-tooltip[data-balloon-pos="down"]::after {
    top: 100%;
    left: 50%;
    margin-top: 8px;
    transform: translateX(-50%);
  }

  .demo-button.auto-tooltip[data-balloon-pos="down"]::before {
    top: 100%;
    left: 50%;
    margin-top: -2px;
    transform: translateX(-50%);
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 8px solid rgba(250, 84, 28, 0.9);
  }

  /* 左侧提示 */
  .demo-button.auto-tooltip[data-balloon-pos="left"]::after {
    right: 100%;
    top: 50%;
    margin-right: 8px;
    transform: translateY(-50%);
    max-width: 180px;
  }

  .demo-button.auto-tooltip[data-balloon-pos="left"]::before {
    right: 100%;
    top: 50%;
    margin-right: -2px;
    transform: translateY(-50%);
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-left: 8px solid rgba(250, 84, 28, 0.9);
  }

  /* 右侧提示 */
  .demo-button.auto-tooltip[data-balloon-pos="right"]::after {
    left: 100%;
    top: 50%;
    margin-left: 8px;
    transform: translateY(-50%);
    max-width: 180px;
  }

  .demo-button.auto-tooltip[data-balloon-pos="right"]::before {
    left: 100%;
    top: 50%;
    margin-left: -2px;
    transform: translateY(-50%);
    border-top: 8px solid transparent;
    border-bottom: 8px solid transparent;
    border-right: 8px solid rgba(250, 84, 28, 0.9);
  }







  /* 章节页样式 */
  .chapter-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url("../images/step-bg.png") center center repeat;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 5;
  }

  .chapter-content {
    text-align: center;
    color: #333;
    max-width: 600px;
    padding: 10%;
  }

  .chapter-number {
    font-size: 72px;
    font-weight: normal;
    line-height: 1;
    margin-bottom: 0;
    opacity: 0.3;
  }

  .chapter-title {
    font-size: 24px;
    font-weight: normal;
    line-height: 1.3;
    margin-bottom: 0;
    color: #333;
  }



  /* 可点击步骤的样式 */
  .clickable-step {
    position: relative;
  }

  .clickable-step::after {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(42, 85, 212, 0.9);
    color: white;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    z-index: 100;
    animation: pulse 2s infinite;
    white-space: nowrap;
  }

  /* 确保步骤容器正确定位 */
  .demo_step {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    display: none !important;
  }

  .demo_step.demo_step_start {
    display: block !important;
  }

  /* 修复可能的布局问题 */
  .demo-wrap {
    position: relative !important;
    display: block !important;
    width: 100% !important;
    overflow: hidden !important;
  }

  @keyframes pulse {
    0% {
      opacity: 0.8;
      transform: translateX(-50%) scale(1);
    }
    50% {
      opacity: 1;
      transform: translateX(-50%) scale(1.05);
    }
    100% {
      opacity: 0.8;
      transform: translateX(-50%) scale(1);
    }
  }

  /* 响应式样式 */
  @media (max-width: 768px) {
    .work-process {
      display: none;
    }
    
    /* 移动设备上的提示框样式优化 */
    .demo-button.auto-tooltip::after {
      max-width: 150px;
      font-size: 13px;
      padding: 8px 12px;
    }
    
    .demo-button.auto-tooltip[data-balloon-pos="left"]::after,
    .demo-button.auto-tooltip[data-balloon-pos="right"]::after {
      max-width: 120px;
    }

    /* 移动设备上的章节页样式 */
    .chapter-number {
      font-size: 48px !important;
    }

    .chapter-title {
      font-size: 18px !important;
    }

    .chapter-content {
      padding: 8% !important;
    }
  }
</style>

<script>
  interface DemoInterface {
    currentStep: number;
    steps: NodeListOf<Element>;
    buttons: NodeListOf<Element>;
    chapterSteps: number[];
    init(): void;
    bindEvents(): void;
    goToStep(stepIndex: number): void;
    jumpToMainStep(mainStepIndex: number): void;
  }

  class InteractiveDemo implements DemoInterface {
    currentStep: number;
    steps: NodeListOf<Element>;
    buttons: NodeListOf<Element>;
    chapterSteps: number[];

    constructor() {
      this.currentStep = 0;
      this.steps = document.querySelectorAll('.demo_step');
      this.buttons = document.querySelectorAll('.demo-button');
      this.chapterSteps = this.findChapterSteps();
      this.init();
    }

    findChapterSteps(): number[] {
      const chapterSteps: number[] = [];
      this.steps.forEach((step, index) => {
        if (step.querySelector('.chapter-overlay')) {
          chapterSteps.push(index);
        }
      });
      return chapterSteps;
    }

    init(): void {
      this.bindEvents();
      this.preloadImages();
      this.initializeFirstStep();
      this.updateStepNavigation();
      this.markStepsLoaded();
    }

    markStepsLoaded(): void {
      const stepsWrap = document.querySelector('.steps-wrap');
      if (stepsWrap) {
        stepsWrap.classList.add('loaded');
      }
    }

    initializeFirstStep(): void {
      this.steps.forEach((step, index) => {
        const stepElement = step as HTMLElement;
        if (index === 0) {
          stepElement.style.display = 'block';
          stepElement.style.setProperty('display', 'block', 'important');
        } else {
          stepElement.style.display = 'none';
          stepElement.style.setProperty('display', 'none', 'important');
        }
      });
      
      this.showCurrentStepButton();
      this.updateCurrentStepStyle();
    }

    hideAllButtons(): void {
      this.buttons.forEach((button) => {
        const buttonElement = button as HTMLElement;
        buttonElement.classList.remove('show', 'auto-tooltip');
        delete buttonElement.dataset.tooltipHidden;
      });
    }

    showCurrentStepButton(): void {
      this.hideAllButtons();
      
      const currentButton = document.querySelector(`[data-step-button="${this.currentStep}"]`) as HTMLElement;
      if (currentButton) {
        currentButton.classList.add('show');
        
        setTimeout(() => {
          if (!currentButton.dataset.tooltipHidden) {
            currentButton.classList.add('auto-tooltip');
          }
        }, 1000);
      }
    }

    bindEvents(): void {
      // 按钮点击事件
      this.buttons.forEach((button) => {
        button.addEventListener('click', () => {
          const stepIndex = parseInt((button as HTMLElement).dataset.stepButton || '0');
          
          if (stepIndex === this.steps.length - 1) {
            this.goToStep(0);
          } else {
            this.goToStep(stepIndex + 1);
          }
        });

        button.addEventListener('mouseenter', () => {
          const buttonElement = button as HTMLElement;
          if (buttonElement.classList.contains('show')) {
            delete buttonElement.dataset.tooltipHidden;
            buttonElement.classList.add('auto-tooltip');
          }
        });

        button.addEventListener('mouseleave', () => {
          const buttonElement = button as HTMLElement;
          buttonElement.classList.remove('auto-tooltip');
          buttonElement.dataset.tooltipHidden = 'true';
        });
      });

      // 步骤导航点击事件
      const stepTitles = document.querySelectorAll('.steps-title');
      stepTitles.forEach((stepTitle, index) => {
        stepTitle.addEventListener('click', () => {
          this.jumpToMainStep(index);
        });
      });

      // 步骤点击事件
      this.steps.forEach((step, index) => {
        const stepElement = step as HTMLElement;
        
        stepElement.addEventListener('click', (e) => {
          if ((e.target as HTMLElement).closest('.demo-button')) {
            return;
          }
          
          if (index === this.currentStep) {
            const hasButtonConfig = document.querySelector(`[data-step-button="${this.currentStep}"]`);
            if (!hasButtonConfig) {
              if (index === this.steps.length - 1) {
                this.goToStep(0);
              } else {
                this.goToStep(index + 1);
              }
            }
          }
        });
      });
    }

    updateCurrentStepStyle(): void {
      this.steps.forEach((step) => {
        const stepElement = step as HTMLElement;
        stepElement.classList.remove('clickable-step');
        stepElement.style.cursor = 'default';
      });

      const currentStepElement = this.steps[this.currentStep] as HTMLElement;
      const isChapterPage = currentStepElement.querySelector('.chapter-overlay');
      const hasButtonConfig = document.querySelector(`[data-step-button="${this.currentStep}"]`);
      
      if (isChapterPage || !hasButtonConfig) {
        currentStepElement.classList.add('clickable-step');
        currentStepElement.style.cursor = 'pointer';
      }
    }

    jumpToMainStep(mainStepIndex: number): void {
      if (mainStepIndex >= 0 && mainStepIndex < this.chapterSteps.length) {
        this.goToStep(this.chapterSteps[mainStepIndex]);
      }
    }

    preloadImages(): void {
      this.steps.forEach((step) => {
        const img = step.querySelector('img[data-src]') as HTMLImageElement;
        if (img && img.dataset.src) {
          const preloadImg = new Image();
          preloadImg.onload = () => {
            img.src = img.dataset.src!;
          };
          preloadImg.src = img.dataset.src;
        }
      });
    }

    goToStep(stepIndex: number): void {
      if (stepIndex >= 0 && stepIndex < this.steps.length) {
        this.steps.forEach((step) => {
          const stepElement = step as HTMLElement;
          stepElement.style.display = 'none';
          stepElement.style.setProperty('display', 'none', 'important');
          stepElement.classList.remove('clickable-step');
        });
        
        this.hideAllButtons();
        
        this.currentStep = stepIndex;
        const targetStepElement = this.steps[this.currentStep] as HTMLElement;
        targetStepElement.style.display = 'block';
        targetStepElement.style.setProperty('display', 'block', 'important');
        
        this.showCurrentStepButton();
        this.updateCurrentStepStyle();
        this.updateStepNavigation();
      }
    }

    reset(): void {
      this.goToStep(0);
    }

    next(): void {
      if (this.currentStep < this.steps.length - 1) {
        this.goToStep(this.currentStep + 1);
      }
    }

    previous(): void {
      if (this.currentStep > 0) {
        this.goToStep(this.currentStep - 1);
      }
    }

    activateStep(stepIndex: number): void {
      const stepTitles = document.querySelectorAll('.steps-title');
      stepTitles.forEach(stepTitle => {
        stepTitle.classList.remove('active');
      });

      if (stepTitles[stepIndex]) {
        stepTitles[stepIndex].classList.add('active');
      }
    }

    updateStepNavigation(): void {
      let mainStepIndex = 0;
      
      for (let i = this.chapterSteps.length - 1; i >= 0; i--) {
        if (this.currentStep >= this.chapterSteps[i]) {
          mainStepIndex = i;
          break;
        }
      }
      
      this.activateStep(mainStepIndex);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new InteractiveDemo();
  });

  declare global {
    interface Window {
      InteractiveDemo: typeof InteractiveDemo;
    }
  }

  if (typeof window !== 'undefined') {
    window.InteractiveDemo = InteractiveDemo;
  }
</script> 